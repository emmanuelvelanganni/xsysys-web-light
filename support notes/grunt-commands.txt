after installing node
in node command prompt

1. npm install -g grunt-cli

2. To Create package.json type the following cmd

npm init

3. npm install grunt --save-dev

fill in the details

4. Create basic gruntfile skeleton gruntfile.js using follwing code

module.exports = function(grunt) {

    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json')
    });

    // task setup 
    grunt.registerTask('default', []);
};

5. install grunt plugins

format: 
	install [task-name] --save-dev

example:

npm install grunt-contrib-jshint --save-dev

or

npm install grunt-autoprefixer --save-dev

6. load the task adding following lines in the created gruntfile.js

grunt.loadNpmTasks('grunt-contrib-jshint');

now gruntfile.js will look like :

module.exports = function(grunt) {
    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json')
    });

    grunt.loadNpmTasks('grunt-contrib-jshint');

    // task setup 
    grunt.registerTask('default', []);
};

7. configure the jshint task by adding jshint section in the gruntfile.js

add the following part of jshint {} block in the jst hint file. Note comma after pkg line

module.exports = function(grunt) {
    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json'),

        jshint: {
            dev: {        
                src: ['/src/js/**/*.js']
            }
        }
    });

    grunt.loadNpmTasks('grunt-contrib-jshint');

    // task setup 
    grunt.registerTask('default', []);
};


8. run the task jshint by typing following line in cmd

grunt jshint

JSHint will now run against any files that match the expression in src.

/*Further configurations*/

9. If we want to run JSHint everytime we run Grunt, we can add it to our default custom task:

grunt.registerTask('default', ['jshint']);

Type following cmd line in NPM command promt to keep watching the changes: 

Grunt watch

but make sure you have installed the watch plugin by typing the followinng line in the grunt file at the bottom of the file in the module.exports function.

grunt.loadNpmTasks('grunt-contrib-watch');

before that you check you have already configured watch task by typing the following watch block in the gruntfile.js

watch: {
	options: {
		livereload: true // refreshes browser window whenever changes are applied
		},
	css: {
		files: ['src/css/**/*.css'],
		tasks: ['autoprefixer']
				
		},
	scripts: {
		files: ['src/js/**/*.js'],
		tasks: ['jshint']
	}
}, (remove comma if this is the last block )




10.  If we have files in our js folder that we do not wish to run through JSHint (such as jQuery or Modernizr), we can excluding them by listing them with a prefix ‘!’. For example, to exclude jQuery we could change our src line to:

src: ['/src/js/**/*.js', '!/src/js/jQuery-1.10.2.min.js']

11. To exclude an entire folder of vendor libraries we could change our src line to:

src: ['/src/js/**/*.js', '!/src/js/vendor/**/*.js']

12. If we wanted to run JSHint in a different custom tasks, we can create a new set of tasks within our Gruntfile:

grunt.registerTask('check-code', ['jshint', 'some-other-task']);



